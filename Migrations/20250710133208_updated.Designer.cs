// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using app_example.Data;

#nullable disable

namespace app_example.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250710133208_updated")]
    partial class updated
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("app_example.Models.Admin.DailyParkSales", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EarlyJump")
                        .HasColumnType("int");

                    b.Property<int>("ExtendedHour")
                        .HasColumnType("int");

                    b.Property<int>("GeneralAdmission")
                        .HasColumnType("int");

                    b.Property<decimal>("OverallPaxAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OverallPaxQty")
                        .HasColumnType("int");

                    b.Property<int>("PWDGeneralAdmission")
                        .HasColumnType("int");

                    b.Property<int>("RunNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DailyParkSales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2022, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Friday",
                            EarlyJump = 8,
                            ExtendedHour = 25,
                            GeneralAdmission = 120,
                            OverallPaxAmount = 15900m,
                            OverallPaxQty = 159,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2022, 7, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Saturday",
                            EarlyJump = 10,
                            ExtendedHour = 30,
                            GeneralAdmission = 160,
                            OverallPaxAmount = 20700m,
                            OverallPaxQty = 207,
                            PWDGeneralAdmission = 7,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 3,
                            Date = new DateTime(2022, 7, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Sunday",
                            EarlyJump = 9,
                            ExtendedHour = 28,
                            GeneralAdmission = 150,
                            OverallPaxAmount = 19300m,
                            OverallPaxQty = 193,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 4,
                            Date = new DateTime(2022, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Monday",
                            EarlyJump = 6,
                            ExtendedHour = 20,
                            GeneralAdmission = 110,
                            OverallPaxAmount = 14100m,
                            OverallPaxQty = 141,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 5,
                            Date = new DateTime(2022, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Tuesday",
                            EarlyJump = 5,
                            ExtendedHour = 18,
                            GeneralAdmission = 105,
                            OverallPaxAmount = 13300m,
                            OverallPaxQty = 133,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 6,
                            Date = new DateTime(2022, 7, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Wednesday",
                            EarlyJump = 6,
                            ExtendedHour = 19,
                            GeneralAdmission = 108,
                            OverallPaxAmount = 13700m,
                            OverallPaxQty = 137,
                            PWDGeneralAdmission = 4,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 7,
                            Date = new DateTime(2022, 7, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Thursday",
                            EarlyJump = 6,
                            ExtendedHour = 20,
                            GeneralAdmission = 112,
                            OverallPaxAmount = 14300m,
                            OverallPaxQty = 143,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 8,
                            Date = new DateTime(2022, 7, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Friday",
                            EarlyJump = 8,
                            ExtendedHour = 23,
                            GeneralAdmission = 125,
                            OverallPaxAmount = 16200m,
                            OverallPaxQty = 162,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 9,
                            Date = new DateTime(2022, 7, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Saturday",
                            EarlyJump = 10,
                            ExtendedHour = 31,
                            GeneralAdmission = 165,
                            OverallPaxAmount = 21300m,
                            OverallPaxQty = 213,
                            PWDGeneralAdmission = 7,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 10,
                            Date = new DateTime(2022, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Sunday",
                            EarlyJump = 9,
                            ExtendedHour = 29,
                            GeneralAdmission = 155,
                            OverallPaxAmount = 19900m,
                            OverallPaxQty = 199,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 11,
                            Date = new DateTime(2022, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Monday",
                            EarlyJump = 7,
                            ExtendedHour = 21,
                            GeneralAdmission = 115,
                            OverallPaxAmount = 14800m,
                            OverallPaxQty = 148,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 12,
                            Date = new DateTime(2022, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Tuesday",
                            EarlyJump = 6,
                            ExtendedHour = 19,
                            GeneralAdmission = 110,
                            OverallPaxAmount = 14000m,
                            OverallPaxQty = 140,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 13,
                            Date = new DateTime(2022, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Wednesday",
                            EarlyJump = 6,
                            ExtendedHour = 20,
                            GeneralAdmission = 113,
                            OverallPaxAmount = 14400m,
                            OverallPaxQty = 144,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 14,
                            Date = new DateTime(2022, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Thursday",
                            EarlyJump = 6,
                            ExtendedHour = 21,
                            GeneralAdmission = 116,
                            OverallPaxAmount = 14800m,
                            OverallPaxQty = 148,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 15,
                            Date = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Friday",
                            EarlyJump = 8,
                            ExtendedHour = 24,
                            GeneralAdmission = 128,
                            OverallPaxAmount = 16600m,
                            OverallPaxQty = 166,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 16,
                            Date = new DateTime(2022, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Saturday",
                            EarlyJump = 10,
                            ExtendedHour = 32,
                            GeneralAdmission = 170,
                            OverallPaxAmount = 21900m,
                            OverallPaxQty = 219,
                            PWDGeneralAdmission = 7,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 17,
                            Date = new DateTime(2022, 7, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Sunday",
                            EarlyJump = 9,
                            ExtendedHour = 30,
                            GeneralAdmission = 158,
                            OverallPaxAmount = 20300m,
                            OverallPaxQty = 203,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 18,
                            Date = new DateTime(2022, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Monday",
                            EarlyJump = 7,
                            ExtendedHour = 21,
                            GeneralAdmission = 117,
                            OverallPaxAmount = 15000m,
                            OverallPaxQty = 150,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 19,
                            Date = new DateTime(2022, 7, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Tuesday",
                            EarlyJump = 6,
                            ExtendedHour = 19,
                            GeneralAdmission = 112,
                            OverallPaxAmount = 14200m,
                            OverallPaxQty = 142,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 20,
                            Date = new DateTime(2022, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Wednesday",
                            EarlyJump = 6,
                            ExtendedHour = 20,
                            GeneralAdmission = 115,
                            OverallPaxAmount = 14600m,
                            OverallPaxQty = 146,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 21,
                            Date = new DateTime(2022, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Thursday",
                            EarlyJump = 6,
                            ExtendedHour = 21,
                            GeneralAdmission = 118,
                            OverallPaxAmount = 15000m,
                            OverallPaxQty = 150,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 22,
                            Date = new DateTime(2022, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Friday",
                            EarlyJump = 8,
                            ExtendedHour = 25,
                            GeneralAdmission = 130,
                            OverallPaxAmount = 16900m,
                            OverallPaxQty = 169,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 23,
                            Date = new DateTime(2022, 7, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Saturday",
                            EarlyJump = 10,
                            ExtendedHour = 33,
                            GeneralAdmission = 172,
                            OverallPaxAmount = 22200m,
                            OverallPaxQty = 222,
                            PWDGeneralAdmission = 7,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 24,
                            Date = new DateTime(2022, 7, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Sunday",
                            EarlyJump = 9,
                            ExtendedHour = 31,
                            GeneralAdmission = 160,
                            OverallPaxAmount = 20600m,
                            OverallPaxQty = 206,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 25,
                            Date = new DateTime(2022, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Monday",
                            EarlyJump = 7,
                            ExtendedHour = 22,
                            GeneralAdmission = 120,
                            OverallPaxAmount = 15400m,
                            OverallPaxQty = 154,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 26,
                            Date = new DateTime(2022, 7, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Tuesday",
                            EarlyJump = 6,
                            ExtendedHour = 20,
                            GeneralAdmission = 114,
                            OverallPaxAmount = 14500m,
                            OverallPaxQty = 145,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 27,
                            Date = new DateTime(2022, 7, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Wednesday",
                            EarlyJump = 6,
                            ExtendedHour = 21,
                            GeneralAdmission = 117,
                            OverallPaxAmount = 14900m,
                            OverallPaxQty = 149,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 28,
                            Date = new DateTime(2022, 7, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Thursday",
                            EarlyJump = 6,
                            ExtendedHour = 22,
                            GeneralAdmission = 120,
                            OverallPaxAmount = 15300m,
                            OverallPaxQty = 153,
                            PWDGeneralAdmission = 5,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 29,
                            Date = new DateTime(2022, 7, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Friday",
                            EarlyJump = 8,
                            ExtendedHour = 26,
                            GeneralAdmission = 132,
                            OverallPaxAmount = 17200m,
                            OverallPaxQty = 172,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 30,
                            Date = new DateTime(2022, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Saturday",
                            EarlyJump = 10,
                            ExtendedHour = 34,
                            GeneralAdmission = 175,
                            OverallPaxAmount = 22600m,
                            OverallPaxQty = 226,
                            PWDGeneralAdmission = 7,
                            RunNumber = 0
                        },
                        new
                        {
                            Id = 31,
                            Date = new DateTime(2022, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DayOfWeek = "Sunday",
                            EarlyJump = 9,
                            ExtendedHour = 32,
                            GeneralAdmission = 162,
                            OverallPaxAmount = 20900m,
                            OverallPaxQty = 209,
                            PWDGeneralAdmission = 6,
                            RunNumber = 0
                        });
                });

            modelBuilder.Entity("app_example.Models.Admin.ForecastedData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PredictedSales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PredictedVisitors")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ForecastedData");
                });

            modelBuilder.Entity("app_example.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("app_example.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("app_example.Models.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotalJumpers")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalSales")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Summaries");
                });

            modelBuilder.Entity("app_example.Models.User.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalJumpersBooked")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("app_example.Models.User.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Addons")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("EInvitation")
                        .HasColumnType("bit");

                    b.Property<int>("ElecFoodCart")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("EquipChafingQty")
                        .HasColumnType("int");

                    b.Property<int>("EquipGlassQty")
                        .HasColumnType("int");

                    b.Property<int>("EquipPlatesQty")
                        .HasColumnType("int");

                    b.Property<int>("EquipSpoonForkQty")
                        .HasColumnType("int");

                    b.Property<bool>("GameCoach")
                        .HasColumnType("bit");

                    b.Property<int>("Jumpers")
                        .HasColumnType("int");

                    b.Property<bool>("MelonaIC")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PartyDecorations")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PartyEquipCD")
                        .HasColumnType("int");

                    b.Property<int>("PartyEquipUtils")
                        .HasColumnType("int");

                    b.Property<int>("PartyGuest")
                        .HasColumnType("int");

                    b.Property<int>("PartyHours")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Socks")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("TrampolineGames")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("WaterBottle")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("app_example.Models.User.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDiscounted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfJumpers")
                        .HasColumnType("int");

                    b.Property<string>("Promo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("app_example.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("app_example.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("app_example.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("app_example.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("app_example.Models.User.Transaction", b =>
                {
                    b.HasOne("app_example.Models.User.Customer", "Customer")
                        .WithMany("Transactions")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("app_example.Models.User.Customer", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
