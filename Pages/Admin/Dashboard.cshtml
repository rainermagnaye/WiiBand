@page
@model app_example.Pages.Admin.DashboardModel
@{
    ViewData["Title"] = "Admin Dashboard";
}

<h1 class="text-3xl font-bold">Dashboard</h1>

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6 space-y-10">
    <!-- Section: Today's Transactions -->
    <section class="bg-white border border-gray-200 rounded-xl shadow p-6 space-y-6">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <h2 class="text-2xl font-semibold">Today's Transactions</h2>

            <form method="get" class="flex flex-col sm:flex-row sm:items-center gap-4">
                <!-- Preserve Overall Summary filters -->
                <input type="hidden" name="Branch" value="@Model.Branch" />
                <input type="hidden" name="Type" value="@Model.Type" />

                <div class="w-full sm:w-auto">
                    <select id="TransactionBranch" name="TransactionBranch"
                            class="mt-1 block w-full sm:w-64 rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200">
                        <option value="" disabled selected="@(string.IsNullOrEmpty(Model.TransactionBranch) ? "selected" : null)">
                            -- Select Branches --
                        </option>
                        @foreach (var branch in Model.BranchOptions.Skip(1))
                        {
                            <option value="@branch.Value" selected="@(branch.Value == Model.TransactionBranch ? "selected" : null)">
                                @branch.Text
                            </option>
                        }
                    </select>
                </div>
                <button type="submit"
                        class="inline-flex items-center justify-center px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 w-full sm:w-auto">
                    Filter
                </button>
            </form>
        </div>

        @if (Model.TodayTransactions != null && Model.TodayTransactions.Transactions.Any())
        {
            <div>
                <h3 class="text-lg font-semibold mb-4">
                    Summary for @Model.TransactionBranch
                </h3>

                <!-- Dashboard Grid -->
                <div class="grid grid-cols-4 md:grid-cols-4 gap-6 mb-6">
                    <!-- Date -->
                    <div class="bg-gray-50 border border-gray-200 rounded-lg p-5 flex items-start gap-4">
                        <svg class="h-8 w-8 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3M16 7V3M4 11h16M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"/>
                        </svg>
                        <div>
                            <div class="text-sm text-gray-500">Date</div>
                            <div class="text-xl font-semibold text-gray-900">
                                @Model.TodayTransactions.Date.ToString("MMMM dd, yyyy")
                            </div>
                        </div>
                    </div>

                    <!-- Visitors -->
                    <div class="bg-gray-50 border border-gray-200 rounded-lg p-5 flex items-start gap-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a4 4 0 00-4-4h-1M9 20H4v-2a4 4 0 014-4h1m6-4a4 4 0 11-8 0 4 4 0 018 0zm6 4a4 4 0 00-3-3.87" />
        </svg>
                        <div>
                            <div class="text-sm text-gray-500">Visitors</div>
                            <div class="text-3xl font-bold text-blue-600">
                                @Model.TodayTransactions.TotalJumpers
                            </div>
                        </div>
                    </div>

                    <!-- Active Now -->
                    <div class="bg-gray-50 border border-gray-200 rounded-lg p-5 flex items-start gap-4">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-8 w-8 text-purple-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
                        <div>
                            <div class="text-sm text-gray-500">Active Now</div>
                            <div class="text-3xl font-bold text-purple-600 activeNowCount">
                                @Model.TodayTransactions.ActiveNow
                            </div>
                        </div>
                    </div>
                    <!-- Total Sales -->
                    <div class="bg-gray-50 border border-gray-200 rounded-lg p-5 flex items-start gap-4">
                        <svg class="h-8 w-8 text-yellow-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                  d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-6v.01M12 12v.01M21 12c0 4.418-4.03 8-9 8s-9-3.582-9-8 4.03-8 9-8 9 3.582 9 8z"/>
                        </svg>
                        <div>
                            <div class="text-sm text-gray-500">Total Sales</div>
                            <div class="text-3xl font-bold text-green-600">
                                ₱@Model.TodayTransactions.TotalSales.ToString("N2")
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Transactions Table -->
                <div class="overflow-x-auto border border-gray-200 rounded-lg shadow">
                    <table class="min-w-full bg-white text-sm sm:text-base">
                        <thead class="bg-gray-100">
                            <tr>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Transaction ID</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Customer Name</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Email</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Promo</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Jumpers</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Discounted</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Total</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Status</th>
                                <th class="px-4 py-2 text-left font-medium text-gray-500 border-b">Time</th>

                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200">
                            @foreach (var tx in Model.TodayTransactions.Transactions.OrderByDescending(t => t.Id))
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-4 py-2">@tx.Id</td>
                                    <td class="px-4 py-2">@tx.CustomerName</td>
                                    <td class="px-4 py-2">@tx.Email</td>
                                    <td class="px-4 py-2">@tx.Promo</td>
                                    <td class="px-4 py-2">@tx.NumberOfJumpers</td>
                                    <td class="px-4 py-2">@tx.Discounted</td>
                                    <td class="px-4 py-2 font-semibold">₱@tx.TotalAmount.ToString("N2")</td>
                                    <td class="px-4 py-2">
                                        <span class="status">@tx.Status</span>
                                    </td>
                                    <td class="px-4 py-2">
                                        <span class="countdown">@tx.TimeRemaining</span>
                                    </td>

                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
        else if (Model.TodayTransactions != null && !Model.TodayTransactions.Transactions.Any())
        {
            <p class="text-gray-500">No transactions yet for today.</p>
        }
        else
        {
            <p class="text-gray-500">Please select a branch to see today's summary.</p>
        }
    </section>

    <!-- Section: Overall Summary -->
    <section class="bg-white border border-gray-200 rounded-xl shadow p-6 space-y-6">
        <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <h2 class="text-2xl font-semibold">Overall Summary</h2>
            <form method="get" class="flex flex-col sm:flex-row sm:items-center gap-4">
                <!-- Preserve Today's Transaction filter -->
                <input type="hidden" name="TransactionBranch" value="@Model.TransactionBranch" />

                <select asp-for="Type"
                        class="block w-full sm:w-40 rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200">
                    <option value="Daily">Daily</option>
                    <option value="Weekly">Weekly</option>
                    <option value="Monthly">Monthly</option>
                </select>
                <select asp-for="Branch" asp-items="Model.BranchOptions"
                        class="block w-full sm:w-64 rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-indigo-500 focus:ring focus:ring-indigo-200">
                </select>
                <button type="submit"
                        class="inline-flex items-center justify-center px-4 py-2 bg-indigo-600 text-white text-sm font-medium rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 w-full sm:w-auto">
                    Filter
                </button>
            </form>
        </div>

        @if (Model.Summaries.Any())
        {
            <div class="overflow-x-auto border border-gray-200 rounded-lg shadow">
                <table class="min-w-full bg-white text-sm sm:text-base">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-4 py-2 text-left font-medium text-gray-500">Branch</th>
                            <th class="px-4 py-2 text-left font-medium text-gray-500">Period</th>
                            <th class="px-4 py-2 text-left font-medium text-gray-500">Total Jumpers</th>
                            <th class="px-4 py-2 text-left font-medium text-gray-500">Total Sales</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        @foreach (var item in Model.Summaries)
                        {
                            <tr class="hover:bg-gray-50">
                                <td class="px-4 py-2">@item.Branch</td>
                                <td class="px-4 py-2">
                                    @if (item.PeriodStart.Date == item.PeriodEnd.Date)
                                    {
                                        @item.PeriodStart.ToString("MMMM d, yyyy")
                                    }
                                    else
                                    {
                                        @($"{item.PeriodStart:MMMM d, yyyy} - {item.PeriodEnd:MMMM d, yyyy}")
                                    }
                                </td>
                                <td class="px-4 py-2">@item.TotalJumpers</td>
                                <td class="px-4 py-2">₱@item.TotalSales.ToString("N2")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <p class="text-gray-500">No summary records found.</p>
        }
    </section>
</div>

@section Scripts {
    <!-- Countdown Status, and Active Now fetching -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function tickCountdowns() {
                let activeNow = 0;

                const rows = document.querySelectorAll('tr');
                rows.forEach(row => {
                    const countdownEl = row.querySelector('.countdown');
                    const statusEl = row.querySelector('.status');
                    if (!countdownEl || !statusEl) return;

                    const text = countdownEl.textContent.trim();
                    const parts = text.split(":").map(p => parseInt(p, 10));
                    if (parts.length !== 3 || parts.some(isNaN)) {
                        countdownEl.textContent = "00:00:00";
                        statusEl.textContent = "Finished";
                        return;
                    }

                    let totalSeconds = parts[0] * 3600 + parts[1] * 60 + parts[2];
                    totalSeconds = Math.max(0, totalSeconds - 1);

                    const h = String(Math.floor(totalSeconds / 3600)).padStart(2, '0');
                    const m = String(Math.floor((totalSeconds % 3600) / 60)).padStart(2, '0');
                    const s = String(totalSeconds % 60).padStart(2, '0');

                    countdownEl.textContent = `${h}:${m}:${s}`;

                    if (totalSeconds > 0) {
                        statusEl.textContent = "Active";
                        const jumpers = parseInt(row.querySelector('td:nth-child(5)').textContent) || 0;
                        activeNow += jumpers;
                    } else {
                        statusEl.textContent = "Finished";
                    }
                });

                // Update Active Now count
                const activeNowElement = document.getElementById("activeNowCount");
                if (activeNowElement) {
                    activeNowElement.textContent = activeNow;
                }
            }

            tickCountdowns();
            setInterval(tickCountdowns, 1000);
        });
    </script>

}