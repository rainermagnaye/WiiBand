@page
@model app_example.Pages.User.EventModel
@{
    ViewData["Title"] = "Events";

    var viewDate = Model.ViewDate;
    var firstDayOfMonth = new DateTime(viewDate.Year, viewDate.Month, 1);
    var daysInMonth = DateTime.DaysInMonth(viewDate.Year, viewDate.Month);
    var firstWeekday = (int)firstDayOfMonth.DayOfWeek; // 0=Sunday, 6=Saturday

    var prevMonth = viewDate.AddMonths(-1);
    var nextMonth = viewDate.AddMonths(1);
}

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<div class="max-w-8xl mx-auto space-y-2">
    <h1 class="text-3xl font-semibold text-gray-800">Events</h1>

    <!-- Calendar Navigation & Calendar -->
    <div class="flex items-center justify-between">
        <!-- Left: Navigation buttons & month -->
        <div class="flex items-center space-x-2">
            <!-- Navigation Buttons -->
            <div class="flex items-center border border-gray-300 rounded-lg">
                <a asp-page="./Event" asp-route-month="@prevMonth.Month" asp-route-year="@prevMonth.Year"
                   class="px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-l-lg">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                </a>

                <div class="flex items-center px-4 py-2 text-sm font-medium text-gray-700 border-l border-r border-gray-300">

                    @viewDate.ToString("MMMM yyyy")
                </div>

                <a asp-page="./Event" asp-route-month="@nextMonth.Month" asp-route-year="@nextMonth.Year"
                   class="px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-r-lg">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </a>
            </div>
        </div>

        <!-- Middle: View Dropdown (optional, can remove if you don't want) -->
        <div class="flex items-center space-x-2">
            <div class="relative">
                <select class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option>Month view</option>
                    <option>Week view</option>
                    <option>Day view</option>
                </select>
                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </div>
            </div>

            <!-- Right: Add Event Button -->
            <button onclick="openModal()"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                + Add Event
            </button>
        </div>
    </div>

    <!-- Calendar Header -->
    <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-2 text-xl font-semibold text-gray-800">
        </div>
    </div>

    <!-- Weekday Headers -->
    <div class="bg-gray-100 rounded-lg overflow-hidden shadow">
        <!-- Weekday Header Row -->
        <div class="grid grid-cols-7 text-center text-gray-600 font-medium bg-gray-200">
            <div class="py-2">Sun</div>
            <div class="py-2">Mon</div>
            <div class="py-2">Tue</div>
            <div class="py-2">Wed</div>
            <div class="py-2">Thu</div>
            <div class="py-2">Fri</div>
            <div class="py-2">Sat</div>
        </div>

        <!-- Calendar grid -->
        <div class="grid grid-cols-7 gap-px bg-gray-200">
            @for (int i = 0; i < firstWeekday; i++)
            {
                <div class="bg-gray-100 h-24"></div>
            }
            @for (int day = 1; day <= daysInMonth; day++)
            {
                var date = new DateTime(viewDate.Year, viewDate.Month, day);
                var cellEvents = Model.Events.Where(e => e.Date.Date == date.Date).ToList();

                <div class="bg-white h-24 p-1 text-xs relative">
                    <div class="absolute top-1 right-1 text-gray-500 text-[10px]">@day</div>
                    @foreach (var ev in cellEvents)
                    {
                        <button onclick="viewEvent(@ev.Id)"
                                class="mt-4 px-1 py-0.5 bg-blue-500 text-white rounded text-[10px] truncate w-full">
                            @ev.Name
                        </button>
                    }
                </div>
            }
        </div>
    </div>
</div>

<h2 class="text-2xl font-semibold text-gray-800 mt-10 mb-4">All Events</h2>

@if (Model.Events.Any())
{
    <div class="overflow-x-auto rounded-2xl shadow bg-white">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr class="text-left text-xs font-semibold text-gray-600 uppercase tracking-wider">
                    <th class="px-4 py-3">Name</th>
                    <th class="px-4 py-3">Email</th>
                    <th class="px-4 py-3">Phone</th>
                    <th class="px-4 py-3">Date</th>
                    <th class="px-4 py-3">Jumpers</th>
                    <th class="px-4 py-3">Socks</th>
                    <th class="px-4 py-3">Duration</th>
                    <th class="px-4 py-3">Total Cost</th>
                    <th class="px-4 py-2 text-center">Actions</th>

                </tr>
            </thead>
            <tbody class="divide-y divide-gray-100">
                @foreach (var ev in Model.Events)
                {
                    <tr class="hover:bg-gray-50 cursor-pointer transition"
                        onclick="viewEvent(@ev.Id)">
                        <td class="px-4 py-2 font-medium text-gray-800">@ev.Name</td>
                        <td class="px-4 py-2 text-gray-700">@ev.Email</td>
                        <td class="px-4 py-2 text-gray-700">@ev.Phone</td>
                        <td class="p-3 text-gray-600">@ev.Date.ToString("MMMM dd, yyyy hh:mm:tt")</td>
                        <td class="px-4 py-2 text-gray-700">@ev.Jumpers</td>
                        <td class="px-4 py-2 text-gray-700">@ev.Socks</td>
                        <td class="px-4 py-2 text-gray-700">@ev.Duration hrs</td>
                        <td class="px-4 py-2 font-semibold text-gray-800">₱@ev.TotalCost</td>
                        <td class="px-4 py-2 text-center">
                            <div class="flex items-center justify-center space-x-3">
                                <div class="relative group">
                                    <button onclick="event.stopPropagation(); editEvent(@ev.Id)"
                                            class="text-yellow-500 hover:text-yellow-600">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M11 5H6a2 2 0 00-2 2v12a2 2 0 002 2h12a2 2 0 002-2v-5M18.5 2.5a2.121 2.121 0 013 3L12 15l-4 1 1-4 9.5-9.5z" />
                                        </svg>
                                    </button>
                                    <div class="absolute bottom-full mb-1 left-1/2 transform -translate-x-1/2 hidden group-hover:block
                                                            bg-gray-800 text-white text-xs rounded px-2 py-0.5 whitespace-nowrap">
                                        Edit
                                    </div>
                                </div>
                                <div class="relative group">
                                    <button onclick="event.stopPropagation(); deleteEvent(@ev.Id)"
                                            class="text-red-500 hover:text-red-600">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                                             viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                                  d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6M1 7h22M9 3h6a2 2 0 012 2v2H7V5a2 2 0 012-2z" />
                                        </svg>
                                    </button>
                                    <div class="absolute bottom-full mb-1 left-1/2 transform -translate-x-1/2 hidden group-hover:block
                                                            bg-gray-800 text-white text-xs rounded px-2 py-0.5 whitespace-nowrap">
                                        Delete
                                    </div>
                                </div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}
else
{
    <p class="text-gray-500">No events found.</p>
}


<!--Add Event Modal -->
<div id="addEventModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-xl shadow-lg max-w-4xl w-full p-6 overflow-y-auto max-h-[90vh]">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold text-gray-800">Add New Event</h2>
            <button type="button" onclick="closeModal()" class="text-gray-500 hover:text-gray-700 text-2xl font-bold">&times;</button>
        </div>

        <form method="post" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <label class="block mb-1 text-gray-700">Name</label>
                    <input asp-for="NewEvent.Name" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Email</label>
                    <input asp-for="NewEvent.Email" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Phone</label>
                    <input asp-for="NewEvent.Phone" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Date & Time</label>
                    <input asp-for="NewEvent.Date" id="dateTimePicker" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Duration (hrs)</label>
                    <input asp-for="NewEvent.Duration" type="number" min="1" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Jumpers</label>
                    <input asp-for="NewEvent.Jumpers" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Socks</label>
                    <input asp-for="NewEvent.Socks" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Trampoline Games</label>
                    <input asp-for="NewEvent.TrampolineGames" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Party Guest</label>
                    <input asp-for="NewEvent.PartyGuest" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Party Hours</label>
                    <input asp-for="NewEvent.PartyHours" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Party Equip CD</label>
                    <input asp-for="NewEvent.PartyEquipCD" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Party Equip Utils</label>
                    <input asp-for="NewEvent.PartyEquipUtils" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Food Cart Cost</label>
                    <input asp-for="NewEvent.ElecFoodCart" type="number" min="0" class="w-full px-3 py-2 border rounded-xl" />
                </div>
                <div>
                    <label class="block mb-1 text-gray-700">Party Decorations</label>
                    <select asp-for="NewEvent.PartyDecorations" class="w-full px-3 py-2 border rounded-xl">
                        <option value="">-- Decorations --</option>
                        <option>HalfDeck</option>
                        <option>WholeDeck</option>
                        <option>Premium</option>
                    </select>
                </div>
            </div>

            <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
                <label class="flex items-center space-x-2">
                    <input asp-for="NewEvent.EInvitation" type="checkbox" class="h-4 w-4 text-blue-600 border-gray-300 rounded" />
                    <span class="text-gray-700">E-Invitation</span>
                </label>
                <label class="flex items-center space-x-2">
                    <input asp-for="NewEvent.GameCoach" type="checkbox" class="h-4 w-4 text-blue-600 border-gray-300 rounded" />
                    <span class="text-gray-700">Game Coach</span>
                </label>
                <label class="flex items-center space-x-2">
                    <input asp-for="NewEvent.WaterBottle" type="checkbox" class="h-4 w-4 text-blue-600 border-gray-300 rounded" />
                    <span class="text-gray-700">Water Bottle</span>
                </label>
                <label class="flex items-center space-x-2">
                    <input asp-for="NewEvent.MelonaIC" type="checkbox" class="h-4 w-4 text-blue-600 border-gray-300 rounded" />
                    <span class="text-gray-700">Melona Ice Cream</span>
                </label>
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Addons (comma separated)</label>
                <input asp-for="NewEvent.Addons" class="w-full px-3 py-2 border rounded-xl" />
            </div>

            <div class="flex justify-end">
                <button type="submit" class="bg-blue-600 text-white px-6 py-2 rounded-xl hover:bg-blue-700">
                    Create Event
                </button>
            </div>
        </form>
    </div>
</div>

@* Modal to view event details on calendar UI *@
<div id="viewModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-xl p-6 w-full max-w-md mx-2 shadow-lg">
        <h2 class="text-xl font-semibold mb-4">Event Details</h2>
        <div id="eventDetails" class="space-y-2 text-gray-700 text-sm">
            Loading...
        </div>
        <div class="flex justify-end mt-4">
            <button onclick="closeViewModal()" class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded transition">
                Close
            </button>
        </div>
    </div>
</div>

<!-- Edit Event Modal -->
<div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-3xl mx-2 overflow-y-auto max-h-[90vh]">
        <h2 class="text-xl font-semibold mb-4">Edit Event</h2>
        <form id="editEventForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <input type="hidden" id="editId" />

            <div>
                <label class="block mb-1 text-gray-700">Name</label>
                <input type="text" id="editName" class="w-full px-3 py-2 border rounded" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Email</label>
                <input type="email" id="editEmail" class="w-full px-3 py-2 border rounded" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Phone</label>
                <input type="text" id="editPhone" class="w-full px-3 py-2 border rounded" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Date & Time</label>
                <input type="datetime-local" id="editDate" class="w-full px-3 py-2 border rounded" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Duration (hrs)</label>
                <input type="number" id="editDuration" class="w-full px-3 py-2 border rounded" min="1" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Jumpers</label>
                <input type="number" id="editJumpers" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Socks</label>
                <input type="number" id="editSocks" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Trampoline Games</label>
                <input type="number" id="editTrampolineGames" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Party Guest</label>
                <input type="number" id="editPartyGuest" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Party Hours</label>
                <input type="number" id="editPartyHours" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Party Equip CD</label>
                <input type="number" id="editPartyEquipCD" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Party Equip Utils</label>
                <input type="number" id="editPartyEquipUtils" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Food Cart Cost</label>
                <input type="number" id="editElecFoodCart" class="w-full px-3 py-2 border rounded" min="0" />
            </div>

            <div>
                <label class="block mb-1 text-gray-700">Party Decorations</label>
                <select id="editPartyDecorations" class="w-full px-3 py-2 border rounded">
                    <option value="">-- Decorations --</option>
                    <option>HalfDeck</option>
                    <option>WholeDeck</option>
                    <option>Premium</option>
                </select>
            </div>

            <!-- Checkboxes -->
            <div class="flex items-center space-x-2 mt-2">
                <input type="checkbox" id="editEInvitation" class="h-4 w-4 text-blue-600 rounded" />
                <label for="editEInvitation" class="text-gray-700">E-Invitation</label>
            </div>

            <div class="flex items-center space-x-2 mt-2">
                <input type="checkbox" id="editGameCoach" class="h-4 w-4 text-blue-600 rounded" />
                <label for="editGameCoach" class="text-gray-700">Game Coach</label>
            </div>

            <div class="flex items-center space-x-2 mt-2">
                <input type="checkbox" id="editWaterBottle" class="h-4 w-4 text-blue-600 rounded" />
                <label for="editWaterBottle" class="text-gray-700">Water Bottle</label>
            </div>

            <div class="flex items-center space-x-2 mt-2">
                <input type="checkbox" id="editMelonaIC" class="h-4 w-4 text-blue-600 rounded" />
                <label for="editMelonaIC" class="text-gray-700">Melona Ice Cream</label>
            </div>

            <div class="md:col-span-2">
                <label class="block mb-1 text-gray-700">Addons (comma separated)</label>
                <input type="text" id="editAddons" class="w-full px-3 py-2 border rounded" />
            </div>
        </form>

        <div class="flex justify-end mt-4 space-x-2">
            <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-300 rounded">Cancel</button>
            <button type="button" onclick="saveEditedEvent()" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Save</button>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div id="deleteModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-2">
        <h2 class="text-xl font-semibold mb-4 text-gray-800">Delete Event</h2>
        <p class="text-gray-700 mb-4">Are you sure you want to delete this event? This action cannot be undone.</p>
        <div class="flex justify-end space-x-2">
            <button type="button" onclick="closeDeleteModal()" class="px-4 py-2 bg-gray-300 rounded">Cancel</button>
            <button type="button" onclick="confirmDeleteEvent()" class="px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700">Delete</button>
        </div>
    </div>
</div>

<!-- Toast Notification - delete -->
<div id="toast"
     class="fixed top-4 left-1/2 transform -translate-x-1/2 bg-green-500 text-white px-4 py-2 rounded shadow-lg opacity-0 pointer-events-none transition-opacity duration-500">
    Event deleted successfully!
</div>

@section Scripts {
    <script>

         flatpickr("#dateTimePicker", {
            enableTime: true,
            dateFormat: "Y-m-d H:i", // matches your backend property format
            time_24hr: false,
            defaultDate: new Date().setHours(0,0,0,0)
        });

        function openModal() {
            document.getElementById('addEventModal').classList.remove('hidden');
        }
        function closeModal() {
            document.getElementById('addEventModal').classList.add('hidden');
        }

            // Show toast if coming from a successful add
        window.addEventListener('DOMContentLoaded', () => {
            const shouldShowAddToast = '@TempData["ShowAddToast"]' === 'True';
            if (shouldShowAddToast) {
                showToast('Event added successfully!');
            }
        });

        //view
        const events = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.Events));

            async function viewEvent(eventId) {
            document.getElementById('eventDetails').innerHTML = 'Loading...';

            try {
                const response = await fetch(`https://localhost:7254/api/Event/${eventId}`);
                if (!response.ok) throw new Error('Event not found.');

                const e = await response.json();

                console.log('Fetched event:', e); // check actual field names

                        const details = `
            <div class="grid grid-cols-1 sm:grid-cols-2 gap-x-4 gap-y-1 text-sm text-gray-700">
                <div><strong>Name:</strong> ${e.Name ?? e.name ?? 'N/A'}</div>
                <div><strong>Email:</strong> ${e.Email ?? e.email ?? 'N/A'}</div>
                <div><strong>Phone:</strong> ${e.Phone ?? e.phone ?? 'N/A'}</div>
                <div><strong>Date:</strong> ${
                    (e.Date ?? e.date)
                        ? new Date(e.Date ?? e.date).toLocaleDateString('en-US', { month: 'long', day: '2-digit', year: 'numeric' })
                        : 'N/A'
                }</div>
                <div><strong>Jumpers:</strong> ${e.Jumpers ?? e.jumpers ?? '0'}</div>
                <div><strong>Socks:</strong> ${e.Socks ?? e.socks ?? '0'}</div>
                <div><strong>Duration:</strong> ${e.Duration ?? e.duration ?? '0'} hrs</div>
                <div><strong>Trampoline Games:</strong> ${e.TrampolineGames ?? e.trampolineGames ?? '0'}</div>
                <div><strong>Party Guest:</strong> ${e.PartyGuest ?? e.partyGuest ?? '0'}</div>
                <div><strong>Party Hours:</strong> ${e.PartyHours ?? e.partyHours ?? '0'}</div>
                <div><strong>Party Equip CD:</strong> ${e.PartyEquipCD ?? e.partyEquipCD ?? '0'}</div>
                <div><strong>Party Equip Utils:</strong> ${e.PartyEquipUtils ?? e.partyEquipUtils ?? '0'}</div>
                <div><strong>Food Cart Cost:</strong> ₱${e.ElecFoodCart ?? e.elecFoodCart ?? '0'}</div>
                <div><strong>Party Decorations:</strong> ${e.PartyDecorations ?? e.partyDecorations ?? 'None'}</div>
                <div><strong>E-Invitation:</strong> ${(e.EInvitation ?? e.eInvitation) ? 'Yes' : 'No'}</div>
                <div><strong>Game Coach:</strong> ${(e.GameCoach ?? e.gameCoach) ? 'Yes' : 'No'}</div>
                <div><strong>Water Bottle:</strong> ${(e.WaterBottle ?? e.waterBottle) ? 'Yes' : 'No'}</div>
                <div><strong>Melona Ice Cream:</strong> ${(e.MelonaIC ?? e.melonaIC) ? 'Yes' : 'No'}</div>
                <div class="sm:col-span-2"><strong>Addons:</strong> ${e.Addons ?? e.addons ?? 'None'}</div>
                <div class="sm:col-span-2"><strong>Total Cost:</strong> ₱${e.TotalCost ?? e.totalCost ?? '0'}</div>
            </div>
        `;
                document.getElementById('eventDetails').innerHTML = details;
            } catch (err) {
                console.error(err);
                document.getElementById('eventDetails').innerHTML = 'Event not found.';
            }

            document.getElementById('viewModal').classList.remove('hidden');
        }

        function closeViewModal() {
            document.getElementById('viewModal').classList.add('hidden');
        }
        // edit event

        async function editEvent(id) {
            try {
                const res = await fetch(`/api/Event/${id}`);
                if (!res.ok) throw new Error('Failed to fetch event');
                const e = await res.json();

                document.getElementById('editId').value = e.id ?? e.Id;
                document.getElementById('editName').value = e.name ?? e.Name ?? '';
                document.getElementById('editEmail').value = e.email ?? e.Email ?? '';
                document.getElementById('editPhone').value = e.phone ?? e.Phone ?? '';

                if (e.date ?? e.Date) {
                    const dt = new Date(e.date ?? e.Date);
                    document.getElementById('editDate').value = dt.toISOString().slice(0,16);
                }

                document.getElementById('editDuration').value = e.duration ?? e.Duration ?? 0;
                document.getElementById('editJumpers').value = e.jumpers ?? e.Jumpers ?? 0;
                document.getElementById('editSocks').value = e.socks ?? e.Socks ?? 0;
                document.getElementById('editTrampolineGames').value = e.trampolineGames ?? e.TrampolineGames ?? 0;
                document.getElementById('editPartyGuest').value = e.partyGuest ?? e.PartyGuest ?? 0;
                document.getElementById('editPartyHours').value = e.partyHours ?? e.PartyHours ?? 0;
                document.getElementById('editPartyEquipCD').value = e.partyEquipCD ?? e.PartyEquipCD ?? 0;
                document.getElementById('editPartyEquipUtils').value = e.partyEquipUtils ?? e.PartyEquipUtils ?? 0;
                document.getElementById('editElecFoodCart').value = e.elecFoodCart ?? e.ElecFoodCart ?? 0;
                document.getElementById('editPartyDecorations').value = e.partyDecorations ?? e.PartyDecorations ?? '';

                document.getElementById('editEInvitation').checked = e.eInvitation ?? e.EInvitation ?? false;
                document.getElementById('editGameCoach').checked = e.gameCoach ?? e.GameCoach ?? false;
                document.getElementById('editWaterBottle').checked = e.waterBottle ?? e.WaterBottle ?? false;
                document.getElementById('editMelonaIC').checked = e.melonaIC ?? e.MelonaIC ?? false;

                document.getElementById('editAddons').value = e.addons ?? e.Addons ?? '';

                openEditModal();
            } catch (error) {
                alert('Could not load event details.');
                console.error(error);
            }
        }

        function openEditModal() {
            document.getElementById('editModal').classList.remove('hidden');
        }

        function closeEditModal() {
            document.getElementById('editModal').classList.add('hidden');
        }

        async function saveEditedEvent() {
            const id = parseInt(document.getElementById('editId').value);
            const updatedEvent = {
                id,
                name: document.getElementById('editName').value,
                email: document.getElementById('editEmail').value,
                phone: document.getElementById('editPhone').value,
                date: document.getElementById('editDate').value,
                duration: parseInt(document.getElementById('editDuration').value),
                jumpers: parseInt(document.getElementById('editJumpers').value),
                socks: parseInt(document.getElementById('editSocks').value),
                trampolineGames: parseInt(document.getElementById('editTrampolineGames').value),
                partyGuest: parseInt(document.getElementById('editPartyGuest').value),
                partyHours: parseInt(document.getElementById('editPartyHours').value),
                partyEquipCD: parseInt(document.getElementById('editPartyEquipCD').value),
                partyEquipUtils: parseInt(document.getElementById('editPartyEquipUtils').value),
                elecFoodCart: parseInt(document.getElementById('editElecFoodCart').value),
                partyDecorations: document.getElementById('editPartyDecorations').value,
                eInvitation: document.getElementById('editEInvitation').checked,
                gameCoach: document.getElementById('editGameCoach').checked,
                waterBottle: document.getElementById('editWaterBottle').checked,
                melonaIC: document.getElementById('editMelonaIC').checked,
                addons: document.getElementById('editAddons').value
            };

            try {
                const res = await fetch(`/api/Event/${id}`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(updatedEvent)
                });

                if (res.ok) {
                    location.reload();
                } else {
                    alert('Failed to update event.');
                }
            } catch (error) {
                alert('Error updating event.');
                console.error(error);
            }
        }


        // Delete
                       let eventIdToDelete = null;

        function deleteEvent(id) {
            eventIdToDelete = id;
            openDeleteModal();
        }

        function openDeleteModal() {
            document.getElementById('deleteModal').classList.remove('hidden');
        }

        function closeDeleteModal() {
            document.getElementById('deleteModal').classList.add('hidden');
        }

        async function confirmDeleteEvent() {
            if (!eventIdToDelete) return;
            try {
                const res = await fetch(`/api/Event/${eventIdToDelete}`, { method: 'DELETE' });
                if (res.ok) {
                    showToast('Event deleted successfully!');
                    setTimeout(() => location.reload(), 1000); // reload after toast
                } else {
                    alert('Failed to delete event.');
                }
            } catch (error) {
                alert('Error deleting event.');
                console.error(error);
            } finally {
                closeDeleteModal();
            }
        }

        function showToast(message) {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.classList.remove('opacity-0', 'pointer-events-none');
            toast.classList.add('opacity-100');

            setTimeout(() => {
                toast.classList.add('opacity-0');
                toast.classList.remove('opacity-100');
            }, 2000); // show for 2 sec
        }
    </script>
}