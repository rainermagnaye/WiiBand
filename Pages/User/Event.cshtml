@page
@model app_example.Pages.User.EventModel
@using System.Globalization

@{
    ViewData["Title"] = "Event Calendar";

    var viewDate = Model.ViewDate;
    var firstDayOfMonth = new DateTime(viewDate.Year, viewDate.Month, 1);
    var daysInMonth = DateTime.DaysInMonth(viewDate.Year, viewDate.Month);
    var firstWeekday = (int)firstDayOfMonth.DayOfWeek; // 0=Sunday, 6=Saturday

    var prevMonth = viewDate.AddMonths(-1);
    var nextMonth = viewDate.AddMonths(1);
}

<div class="max-w-7xl mx-auto px-4 py-8">

    <div class="flex items-center justify-between mb-4">
        <!-- Left: Navigation buttons & month -->
        <div class="flex items-center space-x-2">
            <!-- Navigation Buttons -->
            <div class="flex items-center border border-gray-300 rounded-lg">
                <a asp-page="./Event" asp-route-month="@prevMonth.Month" asp-route-year="@prevMonth.Year"
                   class="px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-l-lg">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                </a>

                <div class="flex items-center px-4 py-2 text-sm font-medium text-gray-700 border-l border-r border-gray-300">
                    
                    @viewDate.ToString("MMMM yyyy")
                </div>

                <a asp-page="./Event" asp-route-month="@nextMonth.Month" asp-route-year="@nextMonth.Year"
                   class="px-3 py-2 text-gray-600 hover:bg-gray-100 rounded-r-lg">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                </a>
            </div>
        </div>

        <!-- Middle: View Dropdown (optional, can remove if you don't want) -->
        <div class="flex items-center space-x-2">
            <div class="relative">
                <select class="appearance-none bg-white border border-gray-300 rounded-lg px-4 py-2 pr-8 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
                    <option>Month view</option>
                    <option>Week view</option>
                    <option>Day view</option>
                </select>
                <div class="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
                    <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                </div>
            </div>

            <!-- Right: Add Event Button -->
            <button onclick="openModal()"
                    class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                + Add Event
            </button>
        </div>
    </div>

    <!-- Calendar Header -->
    <div class="flex items-center justify-between mb-4">
        <div class="flex items-center gap-2 text-xl font-semibold text-gray-800">
        </div>
    </div>

    <!-- Weekday Headers -->
    <div class="bg-gray-100 rounded-lg overflow-hidden shadow">
        <!-- Weekday Header Row -->
        <div class="grid grid-cols-7 text-center text-gray-600 font-medium bg-gray-200">
            <div class="py-2">Sun</div>
            <div class="py-2">Mon</div>
            <div class="py-2">Tue</div>
            <div class="py-2">Wed</div>
            <div class="py-2">Thu</div>
            <div class="py-2">Fri</div>
            <div class="py-2">Sat</div>
        </div>

        <!-- Calendar Grid -->
        <div class="grid grid-cols-7 gap-px bg-gray-200">
            @* Blank cells before first day *@
            @for (int i = 0; i < firstWeekday; i++)
            {
                <div class="bg-gray-100 h-24"></div>
            }

            @* Days of the month *@
            @for (int day = 1; day <= daysInMonth; day++)
            {
                var date = new DateTime(viewDate.Year, viewDate.Month, day);
                var cellEvents = Model.Events.Where(e => e.StartTime.Date == date.Date).ToList();

                <div class="bg-white h-24 p-1 text-xs relative">
                    <div class="absolute top-1 right-1 text-gray-500 text-[10px]">@day</div>

                    @foreach (var ev in cellEvents)
                    {
                        <button onclick="viewEvent(@ev.Id)"
                                class="mt-4 px-1 py-0.5 bg-blue-500 text-white rounded text-[10px] truncate w-full">
                            @ev.Name
                        </button>
                    }
                </div>
            }
        </div>
    </div>

    


<div class="max-w-7xl mx-auto px-4 py-10 space-y-6">

    <h2 class="text-xl font-semibold mb-2">📋 All Booked Events</h2>

    <div class="overflow-x-auto bg-white rounded-lg shadow border border-gray-200">
        <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
                <tr>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration (mins)</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Jumpers</th>
                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var ev in Model.Events)
                {
                    <tr class="hover:bg-gray-50 transition">
                        <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-700">@ev.Id</td>
                        <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-700">@ev.Name</td>
                        <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-700">@ev.Email</td>
                        <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-700">@ev.Date.ToString("yyyy-MM-dd")</td>
                        <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-700">@ev.Time</td>
                        <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-700">@ev.Duration</td>
                        <td class="px-4 py-2 whitespace-nowrap text-sm text-gray-700">@ev.Jumpers</td>
                        <td class="px-4 py-2 text-sm space-x-2">
                                <button onclick="openEditModal(@ev.Id)"
                                        class="inline-flex items-center px-2 py-1 text-xs font-medium text-white bg-blue-600 rounded hover:bg-blue-700">
                                    Edit
                                </button>
                                <button onclick="confirmDelete(@ev.Id)"
                                        class="inline-flex items-center px-2 py-1 text-xs font-medium text-white bg-red-600 rounded hover:bg-red-700">
                                    Delete
                                </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@* Modal to create new event *@
@* <div id="eventModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-2">
        <h2 class="text-xl font-semibold mb-4">Add New Event</h2>
        <form id="eventForm" class="space-y-2">
            <input name="name" placeholder="Name" class="w-full border rounded p-2" required />
            <input name="email" placeholder="Email" class="w-full border rounded p-2" required />
            <input type="date" name="date" class="w-full border rounded p-2" required />
            <input type="time" name="time" class="w-full border rounded p-2" required />
            <input type="number" name="duration" placeholder="Duration (minutes)" class="w-full border rounded p-2" required />
            <input type="number" name="jumpers" placeholder="Number of Jumpers" class="w-full border rounded p-2" required />
            <div class="flex justify-end space-x-2">
                <button type="button" onclick="closeModal()" class="px-3 py-1 bg-gray-300 rounded">Cancel</button>
                <button type="submit" class="px-3 py-1 bg-blue-500 text-white rounded">Save</button>
            </div>
        </form>
    </div>
</div> *@
    <div id="eventModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-xl mx-4 sm:mx-2 overflow-y-auto max-h-[90vh]">
            <h2 class="text-xl font-semibold mb-4">Add New Event</h2>
            <form id="eventForm" class="space-y-4">
                <div class="space-y-2">
                    <input name="name" placeholder="Name" class="w-full border rounded px-3 py-2" required />
                    <input name="email" placeholder="Email" class="w-full border rounded px-3 py-2" required />
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="date" name="date" class="flex-1 border rounded px-3 py-2" required />
                        <input type="time" name="time" class="flex-1 border rounded px-3 py-2" required />
                    </div>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="number" name="package" placeholder="Package" class="flex-1 border rounded px-3 py-2" required />
                    </div>
                    <input type="number" name="jumpers" placeholder="Number of Jumpers" class="flex-1 border rounded px-3 py-2" required />
                    <input type="number" name="socks" placeholder="Number of Socks" class="w-full border rounded px-3 py-2" />
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Add-ons</h6>
                    <div class="flex flex-col space-y-1">
                        <label><input type="checkbox" name="eInvitation" /> E-Invitation</label>
                        <label><input type="checkbox" name="gameCoach" /> 2 Game Coach</label>
                        <label><input type="checkbox" name="waterBottle" /> Water Bottle</label>
                        <label><input type="checkbox" name="melonaIC" /> Melona Ice Cream</label>
                    </div>
                    <div class="mt-2">
                        <label class="block text-sm font-medium">Trampoline Games (How many?)</label>
                        <input type="number" name="trampolineGames" min="0" class="w-full border rounded px-3 py-2" />
                    </div>
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Party Area</h6>
                    <label><input type="checkbox" name="partyArea" onchange="togglePartyAreaDetails(this)"> Include Party Area</label>
                    <div id="partyAreaDetails" class="space-y-2 hidden mt-1">
                        <input type="number" name="partyGuest" placeholder="Number of Guests" class="w-full border rounded px-3 py-2" />
                        <input type="number" name="partyHours" placeholder="Number of Hours" class="w-full border rounded px-3 py-2" />
                    </div>
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Party Decorations</h6>
                    <label><input type="checkbox" name="partyDecorationsEnabled" onchange="toggleDecorationOptions(this)"> Include Decorations</label>
                    <div id="decorationOptions" class="space-y-2 hidden mt-1">
                        <select name="partyDecorations" class="w-full border rounded px-3 py-2">
                            <option value="HalfDeck">Half Deck - ₱8,000</option>
                            <option value="WholeDeck">Whole Deck - ₱15,000</option>
                            <option value="Premium">Premium - ₱25,000</option>
                        </select>
                        <label><input type="checkbox" name="foodCart" onchange="toggleFoodCart(this)"> Include Food Cart?</label>
                        <div id="foodCartOptions" class="mt-1 hidden">
                            <input type="number" name="elecFoodCart" value="1000" readonly class="w-full border rounded px-3 py-2" />
                        </div>
                    </div>
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Party Equipment</h6>
                    <label><input type="checkbox" name="partyEquipment" onchange="toggleEquipmentOptions(this)"> Include Equipment</label>
                    <div id="equipmentOptions" class="space-y-2 hidden mt-1">
                        <input type="number" name="partyEquipCD" placeholder="Chafing Dish Qty (₱500/pc)" class="w-full border rounded px-3 py-2" />
                        <input type="number" name="partyEquipUtils" placeholder="Plates/Glasses Qty (₱100/pax)" class="w-full border rounded px-3 py-2" />
                    </div>
                </div>

                <div class="flex justify-end gap-2 pt-2">
                    <button type="button" onclick="closeModal()" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Save</button>
                </div>
            </form>
        </div>
    </div>



@* Modal to view event details on calendar UI*@
<div id="viewModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
    <div class="bg-white rounded-lg p-6 w-full max-w-md mx-2">
        <h2 class="text-xl font-semibold mb-4">Event Details</h2>
        <div id="eventDetails" class="space-y-1 text-sm text-gray-700">
            Loading...
        </div>
        <div class="flex justify-end mt-4">
            <button onclick="closeViewModal()" class="px-3 py-1 bg-gray-300 rounded">Close</button>
        </div>
    </div>
</div>

    <!-- Edit Event Modal -->
    @* <div id="editModal" class="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50 hidden">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6 relative">
            <h2 class="text-lg font-semibold mb-4">Edit Event</h2>
            <form id="editEventForm" class="space-y-3">
                <input type="hidden" id="edit-id">
                <div>
                    <label class="block text-sm font-medium">Name</label>
                    <input type="text" id="edit-name" class="w-full border rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block text-sm font-medium">Email</label>
                    <input type="email" id="edit-email" class="w-full border rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block text-sm font-medium">Date</label>
                    <input type="date" id="edit-date" class="w-full border rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block text-sm font-medium">Time</label>
                    <input type="time" id="edit-time" class="w-full border rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block text-sm font-medium">Duration (minutes)</label>
                    <input type="number" id="edit-duration" class="w-full border rounded px-3 py-2" required>
                </div>
                <div>
                    <label class="block text-sm font-medium">Jumpers</label>
                    <input type="number" id="edit-jumpers" class="w-full border rounded px-3 py-2" required>
                </div>
                <div class="flex justify-end space-x-2 mt-4">
                    <button type="button" onclick="closeEditModal()" class="px-4 py-2 rounded border">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Save Changes</button>
                </div>
            </form>
        </div>
    </div> *@

    <div id="editModal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-xl mx-4 sm:mx-2 overflow-y-auto max-h-[90vh]">
            <h2 class="text-xl font-semibold mb-4">Edit Event</h2>
            <form id="editEventForm" class="space-y-4">
                <input type="hidden" id="edit-id">

                <div class="space-y-2">
                    <input id="edit-name" placeholder="Name" class="w-full border rounded px-3 py-2" required />
                    <input id="edit-email" placeholder="Email" class="w-full border rounded px-3 py-2" required />
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="date" id="edit-date" class="flex-1 border rounded px-3 py-2" required />
                        <input type="time" id="edit-time" class="flex-1 border rounded px-3 py-2" required />
                    </div>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="number" id="edit-package" placeholder="Package" class="flex-1 border rounded px-3 py-2" required />
                    </div>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <input type="number" id="edit-jumpers" placeholder="No. of Jumpers" class="flex-1 border rounded px-3 py-2" required />
                        <input type="number" id="edit-socks" placeholder="No. of Socks" class="flex-1 border rounded px-3 py-2" />
                    </div>
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Add-ons</h6>
                    <div class="flex flex-col space-y-1">
                        <label><input type="checkbox" id="edit-eInvitation" /> E-Invitation</label>
                        <label><input type="checkbox" id="edit-gameCoach" /> 2 Game Coach</label>
                        <label><input type="checkbox" id="edit-waterBottle" /> Water Bottle</label>
                        <label><input type="checkbox" id="edit-melonaIC" /> Melona Ice Cream</label>
                    </div>
                    <div class="mt-2">
                        <label class="block text-sm font-medium">Trampoline Games (How many?)</label>
                        <input type="number" id="edit-trampolineGames" min="0" class="w-full border rounded px-3 py-2" />
                    </div>
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Party Area</h6>
                    <label><input type="checkbox" id="edit-partyArea" onchange="toggleEditPartyAreaDetails(this)"> Include Party Area</label>
                    <div id="edit-partyAreaDetails" class="space-y-2 hidden mt-1">
                        <input type="number" id="edit-partyGuest" placeholder="Number of Guests" class="w-full border rounded px-3 py-2" />
                        <input type="number" id="edit-partyHours" placeholder="Number of Hours" class="w-full border rounded px-3 py-2" />
                    </div>
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Party Decorations</h6>
                    <label><input type="checkbox" id="edit-partyDecorationsEnabled" onchange="toggleEditDecorationOptions(this)"> Include Decorations</label>
                    <div id="edit-decorationOptions" class="space-y-2 hidden mt-1">
                        <select id="edit-partyDecorations" class="w-full border rounded px-3 py-2">
                            <option value="HalfDeck">Half Deck - ₱8,000</option>
                            <option value="WholeDeck">Whole Deck - ₱15,000</option>
                            <option value="Premium">Premium - ₱25,000</option>
                        </select>
                        <label><input type="checkbox" id="edit-foodCart" onchange="toggleEditFoodCart(this)"> Include Food Cart?</label>
                        <div id="edit-foodCartOptions" class="mt-1 hidden">
                            <input type="number" id="edit-elecFoodCart" value="1000" readonly class="w-full border rounded px-3 py-2" />
                        </div>
                    </div>
                </div>

                <div>
                    <h6 class="mt-2 font-semibold">Party Equipment</h6>
                    <label><input type="checkbox" id="edit-partyEquipment" onchange="toggleEditEquipmentOptions(this)"> Include Equipment</label>
                    <div id="edit-equipmentOptions" class="space-y-2 hidden mt-1">
                        <input type="number" id="edit-partyEquipCD" placeholder="Chafing Dish Qty (₱500/pc)" class="w-full border rounded px-3 py-2" />
                        <input type="number" id="edit-partyEquipUtils" placeholder="Plates/Glasses Qty (₱100/pax)" class="w-full border rounded px-3 py-2" />
                    </div>
                </div>

                <div class="flex justify-end gap-2 pt-2">
                    <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-300 rounded hover:bg-gray-400">Cancel</button>
                    <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Save Changes</button>
                </div>
            </form>
        </div>
    </div>


    <!--DELETE MODAL-->
    <div id="deleteModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50 hidden">
        <div class="bg-white p-6 rounded-lg shadow max-w-sm w-full">
            <h2 class="text-lg font-semibold mb-4">Delete Event</h2>
            <p class="mb-4">Are you sure you want to delete this event?</p>
            <div class="flex justify-end gap-2">
                <button onclick="closeDeleteModal()"
                        class="px-3 py-1 text-gray-700 border border-gray-300 rounded hover:bg-gray-100">
                    Cancel
                </button>
                <button onclick="deleteEvent()"
                        class="px-3 py-1 text-white bg-red-600 rounded hover:bg-red-700">
                    Delete
                </button>
            </div>
        </div>
    </div>



@section Scripts {
        <script>
            // --- Add Event Modal ---
            function openModal() {
                document.getElementById('eventModal').classList.remove('hidden');
            }
            function closeModal() {
                document.getElementById('eventModal').classList.add('hidden');
            }

            // --- Toggle functions for Add Event ---
            function togglePartyAreaDetails(cb) {
                document.getElementById('partyAreaDetails').style.display = cb.checked ? 'block' : 'none';
            }
            function toggleDecorationOptions(cb) {
                document.getElementById('decorationOptions').style.display = cb.checked ? 'block' : 'none';
            }
            function toggleFoodCart(cb) {
                document.getElementById('foodCartOptions').style.display = cb.checked ? 'block' : 'none';
            }
            function toggleEquipmentOptions(cb) {
                document.getElementById('equipmentOptions').style.display = cb.checked ? 'block' : 'none';
            }

            // --- Add Event Form submit ---
            document.getElementById('eventForm').addEventListener('submit', async function (e) {
                e.preventDefault();
                const form = e.target;
                const data = {
                    name: form.name.value,
                    email: form.email.value,
                    date: form.date.value + "T00:00:00",
                    time: form.time.value,
                    duration: parseInt(form.duration.value),
                    jumpers: parseInt(form.jumpers.value),
                    socks: parseInt(form.socks.value) || 0,
                    eInvitation: form.eInvitation.checked,
                    gameCoach: form.gameCoach.checked,
                    waterBottle: form.waterBottle.checked,
                    melonaIC: form.melonaIC.checked,
                    trampolineGames: parseInt(form.trampolineGames.value) || 0,
                    partyArea: form.partyArea.checked,
                    partyGuest: parseInt(form.partyGuest.value) || 0,
                    partyHours: parseInt(form.partyHours.value) || 0,
                    partyDecorationsEnabled: form.partyDecorationsEnabled.checked,
                    partyDecorations: form.partyDecorations.value,
                    foodCart: form.foodCart.checked,
                    elecFoodCart: parseInt(form.elecFoodCart.value) || 1000,
                    partyEquipment: form.partyEquipment.checked,
                    partyEquipCD: parseInt(form.partyEquipCD.value) || 0,
                    partyEquipUtils: parseInt(form.partyEquipUtils.value) || 0,
                    addonsData: "{}"
                };
                try {
                    const response = await fetch('/api/user/event', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    if (response.ok) {
                        closeModal();
                        window.location.reload();
                    } else {
                        alert("Failed to save event.");
                    }
                } catch (error) {
                    console.error(error);
                    alert("Error connecting to API.");
                }
            });

            // --- View Event Modal ---
            function closeViewModal() {
                document.getElementById('viewModal').classList.add('hidden');
            }
            async function viewEvent(id) {
                try {
                    const response = await fetch(`/api/user/event/${id}`);
                    if (response.ok) {
                        const ev = await response.json();
                        const html = `
                            <div><strong>Name:</strong> ${ev.name}</div>
                            <div><strong>Email:</strong> ${ev.email}</div>
                            <div><strong>Date:</strong> ${ev.startTime.split('T')[0]}</div>
                            <div><strong>Time:</strong> ${ev.startTime.split('T')[1].substring(0,5)}</div>
                            <div><strong>Duration:</strong> ${ev.duration} mins</div>
                            <div><strong>Jumpers:</strong> ${ev.jumpers}</div>
                        `;
                        document.getElementById('eventDetails').innerHTML = html;
                        document.getElementById('viewModal').classList.remove('hidden');
                    } else {
                        document.getElementById('eventDetails').innerHTML = 'Could not load event details.';
                        document.getElementById('viewModal').classList.remove('hidden');
                    }
                } catch {
                    document.getElementById('eventDetails').innerHTML = 'Error connecting to API.';
                    document.getElementById('viewModal').classList.remove('hidden');
                }
            }

            // --- Toggle functions for Edit Modal ---
            function toggleEditPartyAreaDetails(cb) {
                document.getElementById('edit-partyAreaDetails').classList.toggle('hidden', !cb.checked);
            }
            function toggleEditDecorationOptions(cb) {
                document.getElementById('edit-decorationOptions').classList.toggle('hidden', !cb.checked);
            }
            function toggleEditFoodCart(cb) {
                document.getElementById('edit-foodCartOptions').classList.toggle('hidden', !cb.checked);
            }
            function toggleEditEquipmentOptions(cb) {
                document.getElementById('edit-equipmentOptions').classList.toggle('hidden', !cb.checked);
            }

            // --- Open Edit Modal and populate fields ---
            function openEditModal(eventId) {
                fetch(`/api/user/event/${eventId}`)
                    .then(res => res.json())
                    .then(ev => {
                        document.getElementById('edit-id').value = ev.id;
                        document.getElementById('edit-name').value = ev.name;
                        document.getElementById('edit-email').value = ev.email;
                        document.getElementById('edit-date').value = ev.date.split('T')[0];
                        document.getElementById('edit-time').value = ev.time;
                        document.getElementById('edit-duration').value = ev.duration;
                        document.getElementById('edit-jumpers').value = ev.jumpers;
                        document.getElementById('edit-socks').value = ev.socks ?? '';

                        let addons = {};
                        try { addons = JSON.parse(ev.addonsData || '{}'); } catch {}

                        document.getElementById('edit-eInvitation').checked = !!addons.eInvitation;
                        document.getElementById('edit-gameCoach').checked = !!addons.gameCoach;
                        document.getElementById('edit-waterBottle').checked = !!addons.waterBottle;
                        document.getElementById('edit-melonaIC').checked = !!addons.melonaIC;
                        document.getElementById('edit-trampolineGames').value = addons.trampolineGames ?? '';

                        document.getElementById('edit-partyArea').checked = !!addons.partyArea;
                        toggleEditPartyAreaDetails(document.getElementById('edit-partyArea'));
                        document.getElementById('edit-partyGuest').value = addons.partyGuest ?? '';
                        document.getElementById('edit-partyHours').value = addons.partyHours ?? '';

                        document.getElementById('edit-partyDecorationsEnabled').checked = !!addons.partyDecorationsEnabled;
                        toggleEditDecorationOptions(document.getElementById('edit-partyDecorationsEnabled'));
                        document.getElementById('edit-partyDecorations').value = addons.partyDecorations ?? 'HalfDeck';
                        document.getElementById('edit-foodCart').checked = !!addons.foodCart;
                        toggleEditFoodCart(document.getElementById('edit-foodCart'));
                        document.getElementById('edit-elecFoodCart').value = addons.elecFoodCart ?? '1000';

                        document.getElementById('edit-partyEquipment').checked = !!addons.partyEquipment;
                        toggleEditEquipmentOptions(document.getElementById('edit-partyEquipment'));
                        document.getElementById('edit-partyEquipCD').value = addons.partyEquipCD ?? '';
                        document.getElementById('edit-partyEquipUtils').value = addons.partyEquipUtils ?? '';

                        document.getElementById('editModal').classList.remove('hidden');
                    })
                    .catch(error => {
                        console.error(error);
                        alert('Failed to load event for editing.');
                    });
            }
            function closeEditModal() {
                document.getElementById('editModal').classList.add('hidden');
            }

            // --- Save edited event ---
            document.getElementById('editEventForm').addEventListener('submit', async function(e) {
                e.preventDefault();
                const id = document.getElementById('edit-id').value;
                const updatedEvent = {
                    name: document.getElementById('edit-name').value,
                    email: document.getElementById('edit-email').value,
                    date: document.getElementById('edit-date').value + "T00:00:00",
                    time: document.getElementById('edit-time').value,
                    duration: parseInt(document.getElementById('edit-duration').value),
                    jumpers: parseInt(document.getElementById('edit-jumpers').value),
                    socks: parseInt(document.getElementById('edit-socks').value) || 0,
                    addonsData: JSON.stringify({
                        eInvitation: document.getElementById('edit-eInvitation').checked,
                        gameCoach: document.getElementById('edit-gameCoach').checked,
                        waterBottle: document.getElementById('edit-waterBottle').checked,
                        melonaIC: document.getElementById('edit-melonaIC').checked,
                        trampolineGames: parseInt(document.getElementById('edit-trampolineGames').value) || 0,
                        partyArea: document.getElementById('edit-partyArea').checked,
                        partyGuest: parseInt(document.getElementById('edit-partyGuest').value) || 0,
                        partyHours: parseInt(document.getElementById('edit-partyHours').value) || 0,
                        partyDecorationsEnabled: document.getElementById('edit-partyDecorationsEnabled').checked,
                        partyDecorations: document.getElementById('edit-partyDecorations').value,
                        foodCart: document.getElementById('edit-foodCart').checked,
                        elecFoodCart: parseInt(document.getElementById('edit-elecFoodCart').value) || 1000,
                        partyEquipment: document.getElementById('edit-partyEquipment').checked,
                        partyEquipCD: parseInt(document.getElementById('edit-partyEquipCD').value) || 0,
                        partyEquipUtils: parseInt(document.getElementById('edit-partyEquipUtils').value) || 0
                    })
                };
                try {
                    const res = await fetch(`/api/user/event/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(updatedEvent)
                    });
                    if (res.ok) {
                        closeEditModal();
                        window.location.reload();
                    } else {
                        alert('Failed to update event.');
                    }
                } catch (error) {
                    console.error(error);
                    alert('Error connecting to API.');
                }
            });

            // --- Delete Event Modal ---
            let deleteEventId = null;
            function confirmDelete(id) {
                deleteEventId = id;
                document.getElementById('deleteModal').classList.remove('hidden');
            }
            function closeDeleteModal() {
                deleteEventId = null;
                document.getElementById('deleteModal').classList.add('hidden');
            }
            async function deleteEvent() {
                if (!deleteEventId) return;
                try {
                    const response = await fetch(`/api/user/event/${deleteEventId}`, { method: 'DELETE' });
                    if (response.ok) {
                        closeDeleteModal();
                        window.location.reload();
                    } else {
                        alert('Failed to delete event.');
                    }
                } catch (error) {
                    console.error(error);
                    alert('Error connecting to API.');
                }
            }
        </script>
}


